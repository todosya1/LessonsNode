// Создаем middleware функцию logger
// req  - объект запроса (содержит информацию о входящем запросе)
// res  - объект ответа (используется для отправки ответа клиенту)
// next - функция для передачи управления следующему middleware
const logger = (req, res, next) => {
    // req.method - строка, содержащая HTTP метод запроса
    // Например: GET, POST, PUT, DELETE и т.д.
    const method = req.method;

    // req.url - строка с URL запроса
    // Например: '/', '/about', '/api/users'
    const url = req.url;

    // new Date() - создает объект с текущей датой и временем
    // getFullYear() - возвращает текущий год (например, 2025)
    const time = new Date().getFullYear();

    // Выводим в консоль информацию о запросе
    // method - метод запроса
    // url    - путь запроса
    // time   - год выполнения запроса
    console.log(method, url, time);

    // Передаем управление следующему middleware
    // Без вызова next() запрос "застрянет" и клиент не получит ответ
    next();
};

// Экспортируем функцию logger, чтобы использовать в других файлах
// через require('./logger')
module.exports = logger;

/*
Анализ кода:

1. Аргументы middleware:
   - req (Request):  содержит данные запроса (метод, URL, заголовки, тело)
   - res (Response): методы для отправки ответа клиенту
   - next:           функция для перехода к следующему middleware

2. Используемые методы:
   - req.method:         получение HTTP метода
   - req.url:           получение URL запроса
   - new Date():        создание объекта даты
   - getFullYear():     получение текущего года
   - console.log():     вывод в консоль
   - next():            переход к следующему middleware
   - module.exports:    экспорт модуля

3. Особенности работы:
   - Логирует каждый запрос перед обработкой
   - Не изменяет запрос или ответ
   - Всегда передает управление дальше
   - Может использоваться глобально или для конкретных маршрутов

4. Возможные улучшения:
   - Добавить время запроса (часы:минуты:секунды)
   - Логировать заголовки запроса
   - Записывать логи в файл
   - Добавить обработку ошибок
*/

/*
URL (Uniform Resource Locator) - это адрес ресурса в интернете. Давайте разберем структуру URL на примере:

CopyInsert
http://localhost:3012/api/users?id=5&sort=desc

┌─────────────┬─────────┬────────┬──────────────┐
│    Часть    │ Пример  │  Что это             │
├─────────────┼─────────┼────────┼──────────────┤
│ Протокол    │ http:// │ Способ соединения    │
│ Хост        │ localhost│ Имя сервера         │
│ Порт        │ :3012   │ Порт сервера        │
│ Путь        │ /api/users│ Путь к ресурсу     │
│ Параметры   │ ?id=5&sort=desc│ Доп. данные   │
└─────────────┴─────────┴────────┴──────────────┘
В нашем logger.js, req.url возвращает только путь и параметры. Например:

При запросе http://localhost:3012/ → req.url будет /
При запросе http://localhost:3012/about → req.url будет /about
При запросе http://localhost:3012/api/users?id=5 → req.url будет /api/users?id=5
*/