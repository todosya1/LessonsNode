// Демонстрация работы с таймерами и файловой системой

const fs = require('fs');

// Код верхнего уровня
setTimeout(() => console.log('Timer 1 end'), 0);

fs.readFile(
    'text1.txt',
    // Колбэк функция, которая попадет в event loop
    () => {
        setTimeout(() => console.log('Timer 2 end'), 0);
        setTimeout(() => console.log('Timer 3 end'), 2000);
        console.log('IO 1 completed');
    },
);

console.log('code end');

/*
Порядок выполнения будет следующим:

code end - выполнится первым (синхронный код)
Timer 1 end - выполнится вторым (таймер с задержкой 0мс)
После чтения файла:
IO 1 completed - выполнится сразу после чтения файла
Timer 2 end - выполнится следом (таймер с задержкой 0мс)
Timer 3 end - выполнится через 2 секунды
Особенности:

Все операции асинхронные
Чтение файла выполняется в Thread Pool
Таймеры обрабатываются через Event Loop
Колбэки выполняются в порядке их готовности
Синхронный код всегда выполняется первым
Это демонстрирует как работают вместе:

Event Loop
Thread Pool
Таймеры
Файловые операции
Колбэки

Учебная цель:
Показать как работают асинхронные операции
Продемонстрировать порядок выполнения колбэков
Объяснить взаимодействие между Event Loop и Thread Pool
Содержимое самого файла (текст "h jkh hjh jhjhk") не имеет значения - важен сам процесс его асинхронного чтения.
*/