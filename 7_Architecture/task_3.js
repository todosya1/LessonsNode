// Демонстрация рекурсивного использования setTimeout

// Рекурсивная функция, которая вызывает сама себя через setTimeout
function fun(count) {
    // Если счетчик больше 3, прекращаем рекурсию
    if (count > 3) return;
    
    // Выводим текущее значение счетчика
    console.log(`fun call: ${count}`);
    
    // Планируем следующий вызов функции через 1 секунду
    // с увеличенным значением счетчика
    setTimeout(() => fun(count + 1), 1000);
}

// Начало выполнения программы
console.log('Start');
// Запускаем рекурсивную функцию с начальным значением 1
fun(1);
// Этот вывод произойдет сразу после вызова fun(1)
console.log('End');

/* Порядок вывода будет:
1. "Start"
2. "fun call: 1"
3. "End"
4. "fun call: 2"    // через 1 секунду
5. "fun call: 3"    // через 2 секунды
6. "fun call: 4"    // через 3 секунды

Важно! Каждый следующий вызов fun() происходит через setTimeout,
что создает задержку в 1 секунду между выводами.
Это пример "отложенной" рекурсии через очередь задач (Task Queue).

*/