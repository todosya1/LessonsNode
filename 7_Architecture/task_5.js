// Демонстрация работы Thread Pool в Node.js

// Подключаем модуль для криптографических операций
const crypto = require('crypto');

// Часть 1: Одна тяжелая операция
console.log('--- Часть 1: Одна операция ---');
const start1 = Date.now();
// pbkdf2 - это тяжелая криптографическая операция, которая будет выполняться в Thread Pool
crypto.pbkdf2('kuku1234', '5', 1000000, 64, 'sha512', () => {
    console.log('1 end', Date.now() - start1);
});

// Часть 2: Несколько параллельных операций
console.log('--- Часть 2: Две параллельные операции ---');
const start2 = Date.now();
// Первая операция
crypto.pbkdf2('kuku1234', '5', 1000000, 64, 'sha512', () => {
    console.log('1 end', Date.now() - start2);
});
// Вторая операция
crypto.pbkdf2('kuku1234', '5', 1000000, 64, 'sha512', () => {
    console.log('2 end', Date.now() - start2);
});

/* 
Thread Pool в Node.js:
1. По умолчанию имеет 4 потока для выполнения тяжелых операций
2. Используется для CPU-интенсивных задач (криптография, сжатие)
3. В первой части одна операция занимает один поток
4. Во второй части две операции могут выполняться параллельно в разных потоках

Результат выполнения:
- В первой части мы увидим время выполнения одной операции
- Во второй части две операции начнут выполняться одновременно,
  и их время выполнения будет примерно одинаковым, так как есть свободные потоки

Важно! Если бы мы запустили 5 таких операций одновременно,
4 начали бы выполняться сразу (по числу потоков),
а 5-я ждала бы освобождения любого из потоков.
*/

/*
Давайте подробнее разберем параметры функции crypto.pbkdf2:

Параметр 'kuku1234':
Это исходный пароль или строка
Будет преобразован в криптографический ключ
В реальных приложениях это пароль пользователя
Параметр '5' (соль):
Добавляется к паролю перед хешированием
Делает результат уникальным даже для одинаковых паролей
Защищает от атак с предварительно вычисленными хешами
Параметр 1000000 (итерации):
Количество повторений хеширования
Чем больше итераций, тем безопаснее
Но также увеличивается время выполнения
Это намеренно делает процесс медленным для защиты от перебора
Параметр 64:
Длина выходного ключа в байтах
64 байта = 512 бит
Достаточно длинный для криптографической стойкости
Параметр 'sha512':
Алгоритм хеширования
SHA-512 считается криптографически стойким
Производит хеш длиной 512 бит
Callback-функция:
Вызывается после завершения операции
Получает результат или ошибку
В нашем примере измеряет время выполнения
Эта функция широко используется для безопасного хранения паролей в базах данных и генерации криптографических ключей.
*/